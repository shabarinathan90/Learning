
Thanks for clarifying! Based on that, here's a **revised and realistic mid-year appraisal draft** — keeping it aligned with **your actual contributions so far**:

---

### ✅ **Manage Risk (What)**

> * Investigated and resolved multiple job failure scenarios across shell, Oracle, and ETL environments, ensuring data consistency and minimal downtime.
> * Handled escalations related to trade feed delays and SLA misses by coordinating with upstream teams and applying fixes to prevent recurrence.
> * Ensured risk mitigation by regularly validating critical feed authentication setups and addressing issues like expired keytabs and GSSAPI errors.

---

### ✅ **Drive Operational Excellence (What)**

> * Automated repetitive SQL execution and data export tasks from Vertica and Oracle to Excel/CSV using shell and Python — improving team efficiency.
> * Reduced manual effort in scribe reporting and email generation by eliminating duplicate attachments using hashing logic in .NET 6.
> * Improved issue triaging by standardizing how logs and incorrect records are reviewed post-failure, making batch monitoring smoother.

---

### ✅ **Drive Growth (What)**

> * Contributed to DevCon and OPEX ideas by proposing automation for failure detection and ticket creation using lightweight UI and Selenium-based workflows.
> * Took initiative in identifying areas where user requests (like CV calculation and trade tracing) could be optimized through reusable scripts.
> * Started exploring better technology options for data warehouse performance enhancement (e.g., Vertica alternatives) and shared early findings.

---

### ✅ **Great Place to Work (How)**

> * Actively volunteered in ESG and CSR initiatives such as teaching students via Chennai Volunteers and supporting special kids at SPASTN.
> * Regularly participated in team activities and internal events, encouraging a collaborative and inclusive work environment.
> * Supported knowledge retention by documenting key production support learnings and automation scripts for team reference.

---

Would you like to make this even more specific to recent projects (e.g., a big incident you solved or an automation you built recently)? I can customize it further if you provide any names, metrics, or months.

Perfect! Based on what you shared, here’s a polished and concise version of the **"Drive Operational Excellence (What)"** section that reflects your actual mid-year contributions:

---

### ✅ **Drive Operational Excellence (What)**

> * Set up **MaxRun alarms for 800+ AutoSys jobs**, enabling early detection of long-running or stuck jobs and reducing batch monitoring effort.
> * Automated **data sanity checks for all critical feed sources**, improving data reliability and reducing manual validation overhead.
> * Analyzed and optimized batch schedules, enabling **Vertica processing to start 2 hours earlier**, improving overall turnaround time.
> * Volunteered to take on **additional responsibilities for the Zeus application** and other team initiatives, enhancing support coverage and system knowledge.
> * Fixed **multiple production bugs**, contributing to more stable operations and fewer escalations.

---

Would you like to include any metrics like how many bugs or what impact the batch timing change had (e.g., faster delivery to downstream systems)? I can revise it accordingly.



FOR i IN 1..v_col_cnt LOOP
  DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);

  -- Trim whitespace
  v_col_val := TRIM(v_col_val);

  -- Round numeric values to 2 decimal places
  IF REGEXP_LIKE(v_col_val, '^-?[0-9]*\.?[0-9]+$') THEN
    BEGIN
      v_col_val := TO_CHAR(ROUND(TO_NUMBER(v_col_val), 2));
    EXCEPTION
      WHEN OTHERS THEN
        NULL; -- fallback in case of conversion failure
    END;
  END IF;

  DBMS_OUTPUT.PUT_LINE('<td>' || v_col_val || '</td>');
END LOOP;





cat > "$HTML_FILE" <<EOF
<html>
<head>
  <style>
    body { font-family: Arial, sans-serif; }
    table { border-collapse: collapse; width: 100%; }
    th, td { border: 1px solid #dddddd; text-align: left; padding: 8px; }
    th { background-color: #f2f2f2; }
  </style>
</head>
<body>
<p>Hi,</p>
<h3>Sanity Check Report - ${FEED_NAME}</h3>
<p><b>Trade Date:</b> ${TRADE_DATE}</p>
EOF




#!/bin/bash

# ====== CONFIGURATION ======
FEED_NAME="$1"
LOG_DATE=$(date '+%d-%b-%Y' | tr '[:upper:]' '[:lower:]')
HTML_FILE="/tmp/${FEED_NAME}_sanity_${LOG_DATE}.html"

DB_USER="your_user"
DB_PASS="your_password"
DB_TNS="your_tns"

# ====== FETCH RECIPIENT EMAIL ======
EMAIL_TO=$(sqlplus -s ${DB_USER}/${DB_PASS}@${DB_TNS} <<EOF
SET HEADING OFF FEEDBACK OFF PAGES 0 TRIMSPOOL ON
SELECT recipient_emails FROM csarload.aps_data_sanity_check WHERE feed_name = '${FEED_NAME}' AND ROWNUM = 1;
EXIT;
EOF
)

# ====== START HTML ======
echo "<html><body>" > $HTML_FILE
echo "<p>Hi,</p>" >> $HTML_FILE
echo "<p>Sanity check report - <b>${FEED_NAME}</b></p>" >> $HTML_FILE
echo "<p><b>Trade Date:</b> ${LOG_DATE}</p>" >> $HTML_FILE

# ====== EXECUTE SQL BLOCK ======
sqlplus -s ${DB_USER}/${DB_PASS}@${DB_TNS} <<EOF >> $HTML_FILE
SET SERVEROUTPUT ON SIZE 1000000
SET FEEDBACK OFF
SET HEADING OFF
SET PAGESIZE 0
SET LINESIZE 1000
SET TERMOUT OFF

DECLARE
    v_sql         CLOB;
    v_cursor      INTEGER;
    v_col_cnt     INTEGER := 0;
    v_col_val     VARCHAR2(4000);
    v_ignore      INTEGER;
    v_trade_date  VARCHAR2(11);
    v_feed_name   VARCHAR2(100) := '${FEED_NAME}';
    v_desc        VARCHAR2(200);

    col_desc_tab  DBMS_SQL.DESC_TAB;
BEGIN
    -- Step 1: Get Trade Date from control table
    SELECT LOWER(TO_CHAR(TO_DATE(param1, 'YYYY-MM-DD'), 'DD-MON-YYYY'))
    INTO v_trade_date
    FROM load.control_table
    WHERE param2 = 'dailyrefreshdate';

    FOR rec IN (
        SELECT recon_query_1 AS query, feed_description AS description
        FROM load.asanity_check
        WHERE feed_name = v_feed_name
        ORDER BY query_seq
    ) LOOP
        v_sql := rec.query;
        v_desc := rec.description;

        -- Replace parameters
        v_sql := REPLACE(v_sql, ':TRADE_DATE', '''' || v_trade_date || '''');
        v_sql := REPLACE(v_sql, ':CREATED_DATE', '''' || v_trade_date || '''');

        DBMS_OUTPUT.PUT_LINE('<h4>' || v_desc || '</h4>');
        DBMS_OUTPUT.PUT_LINE('<table border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; font-family: Arial;">');

        v_cursor := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);
        DBMS_SQL.DESCRIBE_COLUMNS(v_cursor, v_col_cnt, col_desc_tab);

        -- Define columns
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.DEFINE_COLUMN(v_cursor, i, v_col_val, 4000);
        END LOOP;

        -- Table Header
        DBMS_OUTPUT.PUT_LINE('<tr>');
        FOR i IN 1..v_col_cnt LOOP
            DBMS_OUTPUT.PUT_LINE('<th>' || SUBSTR(col_desc_tab(i).col_name, 1, 30) || '</th>');
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('</tr>');

        -- Execute and print data rows
        v_ignore := DBMS_SQL.EXECUTE(v_cursor);
        WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
            DBMS_OUTPUT.PUT_LINE('<tr>');
            FOR i IN 1..v_col_cnt LOOP
                DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
                DBMS_OUTPUT.PUT_LINE('<td>' || v_col_val || '</td>');
            END LOOP;
            DBMS_OUTPUT.PUT_LINE('</tr>');
        END LOOP;

        DBMS_OUTPUT.PUT_LINE('</table><br/>');
        DBMS_SQL.CLOSE_CURSOR(v_cursor);
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('<p style="color:red;">Error: ' || SQLERRM || '</p>');
END;
/
EOF

# ====== END HTML & SEND MAIL ======
echo "<p>Regards,<br/>Data Sanity Team</p></body></html>" >> $HTML_FILE

echo "Sending email to $EMAIL_TO..."
cat $HTML_FILE | /usr/bin/s-nail -s "Sanity Check Report: ${FEED_NAME} - ${LOG_DATE}" -r "no-reply@yourdomain.com" -a "Content-Type: text/html" "$EMAIL_TO"






SET SERVEROUTPUT ON SIZE 1000000

DECLARE
    v_sql         CLOB;
    v_cursor      INTEGER;
    v_col_cnt     INTEGER := 0;
    v_col_val     VARCHAR2(4000);
    v_ignore      INTEGER;
    
    v_feed_name   VARCHAR2(100) := 'FIC'; -- your feed name
    v_trade_date  VARCHAR2(10) := '2025-06-10'; -- hardcoded for test
    
    col_name_tab  DBMS_SQL.VARCHAR2_TABLE;
    col_type_tab  DBMS_SQL.NUMBER_TABLE;
BEGIN
    -- Step 1: Fetch SQL from config table
    SELECT recon_query_1
    INTO v_sql
    FROM csarload.aps_data_sanity_check
    WHERE feed_name = v_feed_name
    AND query_seq = 1;

    -- Step 2: Replace placeholders with actual date values
    v_sql := REPLACE(v_sql, ':TRADE_DATE', '''' || v_trade_date || '''');
    v_sql := REPLACE(v_sql, ':CREATED_DATE', '''' || v_trade_date || '''');

    DBMS_OUTPUT.PUT_LINE('Executing SQL:');
    DBMS_OUTPUT.PUT_LINE(SUBSTR(v_sql, 1, 300));  -- print first 300 chars for safety

    -- Step 3: Open cursor, parse and describe columns
    v_cursor := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

    DBMS_SQL.DESCRIBE_COLUMNS(v_cursor, v_col_cnt, col_name_tab, col_type_tab);

    FOR i IN 1..v_col_cnt LOOP
        DBMS_SQL.DEFINE_COLUMN(v_cursor, i, v_col_val, 4000);
    END LOOP;

    -- Step 4: Execute query
    v_ignore := DBMS_SQL.EXECUTE(v_cursor);

    -- Step 5: Fetch and output rows
    WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
            DBMS_OUTPUT.PUT_LINE(col_name_tab(i) || ': ' || v_col_val);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('---');
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR(v_cursor);

EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;
/




DECLARE
  v_sql CLOB;
  v_trade_date VARCHAR2(10) := '2025-06-10'; -- hardcode for now
BEGIN
  SELECT recon_query_1 INTO v_sql FROM csarload.aps_data_sanity_check WHERE feed_name = 'FIC' AND query_seq = 1;

  v_sql := REPLACE(v_sql, ':TRADE_DATE', '''' || v_trade_date || '''');
  v_sql := REPLACE(v_sql, ':CREATED_DATE', '''' || v_trade_date || '''');

  DBMS_OUTPUT.PUT_LINE('Final SQL:');
  DBMS_OUTPUT.PUT_LINE(v_sql);

EXCEPTION WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('Error fetching or replacing SQL: ' || SQLERRM);
END;
/





SET SERVEROUTPUT ON SIZE 1000000

DECLARE
    v_sql         CLOB;
    v_cursor      INTEGER;
    v_col_cnt     INTEGER := 0;
    v_col_val     VARCHAR2(4000);
    v_ignore      INTEGER;
    
    v_feed_name   VARCHAR2(100) := 'FIC'; -- replace with your feed
    v_trade_date  VARCHAR2(10);
    
    col_name_tab  DBMS_SQL.VARCHAR2_TABLE;
    col_type_tab  DBMS_SQL.NUMBER_TABLE;
BEGIN
    -- Step 1: Get trade date
    SELECT param1
    INTO v_trade_date
    FROM load.control_table
    WHERE param2 = 'dailyrefreshdate';

    DBMS_OUTPUT.PUT_LINE('Trade Date: ' || v_trade_date);

    -- Step 2: Get query from config
    SELECT recon_query_1
    INTO v_sql
    FROM load.aity_check
    WHERE feed_name = v_feed_name
    AND query_seq = 1;

    -- Step 3: Replace placeholders
    v_sql := REPLACE(v_sql, ':TRADE_DATE', '''' || v_trade_date || '''');
    v_sql := REPLACE(v_sql, ':CREATED_DATE', '''' || v_trade_date || '''');

    DBMS_OUTPUT.PUT_LINE('SQL: ' || SUBSTR(v_sql, 1, 200));

    -- Step 4: Parse and describe
    v_cursor := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

    DBMS_SQL.DESCRIBE_COLUMNS(v_cursor, v_col_cnt, col_name_tab, col_type_tab);

    FOR i IN 1 .. v_col_cnt LOOP
        DBMS_SQL.DEFINE_COLUMN(v_cursor, i, v_col_val, 4000);
    END LOOP;

    -- Step 5: Execute
    v_ignore := DBMS_SQL.EXECUTE(v_cursor);

    -- Step 6: Fetch and print
    WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
        FOR i IN 1 .. v_col_cnt LOOP
            DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
            DBMS_OUTPUT.PUT_LINE('-> ' || col_name_tab(i) || ': ' || v_col_val);
        END LOOP;
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR(v_cursor);

EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;
/






SET SERVEROUTPUT ON SIZE 1000000

DECLARE
    v_sql         CLOB;
    v_cursor      INTEGER;
    v_col_cnt     INTEGER;
    v_col_val     VARCHAR2(4000);
    v_col_name    VARCHAR2(1000);
    v_col_type    BINARY_INTEGER;
    v_col_len     BINARY_INTEGER;
    v_precision   BINARY_INTEGER;
    v_scale       BINARY_INTEGER;

    v_feed_name   VARCHAR2(100) := 'FIC'; -- your feed name
    v_trade_date  VARCHAR2(10);

BEGIN
    -- Step 1: Get trade date from control table
    SELECT param1 INTO v_trade_date
    FROM coad.control_table
    WHERE param2 = 'dailyrefreshdate';

    DBMS_OUTPUT.PUT_LINE('Trade Date: ' || v_trade_date);

    -- Step 2: Fetch SQL from config table
    SELECT recon_query_1
    INTO v_sql
    FROM oad.aity_check
    WHERE feed_name = v_feed_name
    AND query_seq = 1;  -- test first query

    -- Step 3: Replace bind variables
    v_sql := REPLACE(v_sql, ':TRADE_DATE', '''' || v_trade_date || '''');
    v_sql := REPLACE(v_sql, ':CREATED_DATE', '''' || v_trade_date || '''');

    DBMS_OUTPUT.PUT_LINE('Executing Query (trimmed):');
    DBMS_OUTPUT.PUT_LINE(SUBSTR(v_sql, 1, 200));

    -- Step 4: Execute dynamically
    v_cursor := DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

    v_col_cnt := DBMS_SQL.DESCRIBE_COLUMNS(v_cursor);

    FOR i IN 1..v_col_cnt LOOP
        DBMS_SQL.DEFINE_COLUMN(v_cursor, i, v_col_val, 4000);
    END LOOP;

    DBMS_SQL.EXECUTE(v_cursor);

    WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
            DBMS_OUTPUT.PUT_LINE('-> Col ' || i || ': ' || v_col_val);
        END LOOP;
    END LOOP;

    DBMS_SQL.CLOSE_CURSOR(v_cursor);

EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('ERROR: ' || SQLERRM);
END;
/




.......
sqlplus -s ${DB_USER}/${DB_PASS}@${DB_TNS} <<!END
SET SERVEROUTPUT ON SIZE 1000000
SET FEEDBACK OFF
SET HEADING OFF
SET PAGESIZE 0
SET LINESIZE 1000
SPOOL $HTML_FILE APPEND

DECLARE
    CURSOR c_queries IS
        SELECT query, description
        FROM trade_feed_query_config
        WHERE feed_name = '$FEED_NAME'
        ORDER BY query_seq;

    v_cursor     INTEGER;
    v_sql        CLOB;
    v_col_cnt    INTEGER;
    v_desc       VARCHAR2(500);
    v_col_val    VARCHAR2(4000);
    v_col_name   VARCHAR2(1000);
    v_col_type   BINARY_INTEGER;
    v_col_len    BINARY_INTEGER;
    v_precision  BINARY_INTEGER;
    v_scale      BINARY_INTEGER;
    col_tab      DBMS_SQL.VARCHAR2_TABLE;
BEGIN
    FOR rec IN c_queries LOOP
        -- Replace trade date and created date if present
        v_sql := REPLACE(rec.query, ':trade_date', '''$TRADE_DATE''');
        v_sql := REPLACE(v_sql, ':created_date', '''$TRADE_DATE''');
        v_desc := rec.description;

        v_cursor := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

        v_col_cnt := DBMS_SQL.DESCRIBE_COLUMNS(v_cursor);
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.DEFINE_COLUMN(v_cursor, i, col_tab(i), 4000);
        END LOOP;

        -- Begin HTML table for this query
        DBMS_OUTPUT.PUT_LINE('<table border=''1'' cellpadding=''5'' cellspacing=''0'' style=''border-collapse: collapse; font-family: Arial;'">');
        DBMS_OUTPUT.PUT_LINE('<tr style="background-color:#e6f7ff"><td colspan="' || v_col_cnt || '"><b>' || v_desc || '</b></td></tr>');

        -- Print column headers
        DBMS_OUTPUT.PUT_LINE('<tr>');
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.DESCRIBE_COLUMN(v_cursor, i, v_col_name, v_col_type, v_col_len, v_precision, v_scale);
            DBMS_OUTPUT.PUT_LINE('<th>' || SUBSTR(v_col_name, 1, 30) || '</th>');
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('</tr>');

        -- Fetch and print rows
        IF DBMS_SQL.EXECUTE(v_cursor) > 0 THEN
            NULL;
        END IF;

        WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
            DBMS_OUTPUT.PUT_LINE('<tr>');
            FOR i IN 1..v_col_cnt LOOP
                DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
                DBMS_OUTPUT.PUT_LINE('<td>' || v_col_val || '</td>');
            END LOOP;
            DBMS_OUTPUT.PUT_LINE('</tr>');
        END LOOP;

        DBMS_SQL.CLOSE_CURSOR(v_cursor);
        DBMS_OUTPUT.PUT_LINE('</table><br/>');
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('<tr><td colspan="5" style="color:red;">Error: ' || SQLERRM || '</td></tr>');
END;
/

SPOOL OFF
EXIT;
!END







test
#!/bin/bash

FEED_NAME="$1"
TRADE_DATE=$(date '+%Y-%m-%d')
HTML_FILE="/tmp/${FEED_NAME}_sanity_${TRADE_DATE}.html"

DB_USER="your_db_user"
DB_PASS="your_db_password"
DB_TNS="your_db_tns"

# Get recipient email for this feed
EMAIL_TO=$(sqlplus -s ${DB_USER}/${DB_PASS}@${DB_TNS} <<EOF
SET HEADING OFF FEEDBACK OFF PAGES 0 TRIMSPOOL ON
SELECT DISTINCT recipient_emails FROM trade_feed_query_config WHERE feed_name = '$FEED_NAME';
EXIT;
EOF
)

# HTML header
echo "<html><body>" > $HTML_FILE
echo "<h3>Sanity Check Report - ${FEED_NAME}</h3>" >> $HTML_FILE
echo "<p><b>Trade Date:</b> ${TRADE_DATE}</p>" >> $HTML_FILE

# PL/SQL to build HTML tables dynamically
sqlplus -s ${DB_USER}/${DB_PASS}@${DB_TNS} <<EOF >> $HTML_FILE
SET SERVEROUTPUT ON SIZE 1000000
SET FEEDBACK OFF
SET HEADING OFF
SET PAGESIZE 0
SET LINESIZE 1000

DECLARE
    CURSOR c_queries IS
        SELECT query, description
        FROM trade_feed_query_config
        WHERE feed_name = '$FEED_NAME'
        ORDER BY query_seq;

    v_cursor   INTEGER;
    v_sql      CLOB;
    v_col_cnt  INTEGER;
    v_desc     VARCHAR2(500);
    v_col_val  VARCHAR2(4000);
    v_col_name VARCHAR2(1000);
    col_tab    DBMS_SQL.VARCHAR2_TABLE;
BEGIN
    FOR rec IN c_queries LOOP
        v_sql := REPLACE(rec.query, ':TRADE_DATE', '''$TRADE_DATE''');
        v_desc := rec.description;

        v_cursor := DBMS_SQL.OPEN_CURSOR;
        DBMS_SQL.PARSE(v_cursor, v_sql, DBMS_SQL.NATIVE);

        v_col_cnt := DBMS_SQL.DESCRIBE_COLUMNS(v_cursor);
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.DEFINE_COLUMN(v_cursor, i, col_tab(i), 4000);
        END LOOP;

        -- Start section
        DBMS_OUTPUT.PUT_LINE('<table border=''1'' cellpadding=''5'' cellspacing=''0'' style=''border-collapse: collapse; font-family: Arial;'">');
        DBMS_OUTPUT.PUT_LINE('<tr style="background-color:#e6f7ff"><td colspan="' || v_col_cnt || '"><b>' || v_desc || '</b></td></tr>');

        -- Header row
        DBMS_OUTPUT.PUT_LINE('<tr>');
        FOR i IN 1..v_col_cnt LOOP
            DBMS_SQL.DESCRIBE_COLUMN(v_cursor, i, v_col_name, v_col_cnt, v_col_cnt, v_col_cnt, v_col_cnt);
            DBMS_OUTPUT.PUT_LINE('<th>' || v_col_name || '</th>');
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('</tr>');

        -- Data rows
        WHILE DBMS_SQL.FETCH_ROWS(v_cursor) > 0 LOOP
            DBMS_OUTPUT.PUT_LINE('<tr>');
            FOR i IN 1..v_col_cnt LOOP
                DBMS_SQL.COLUMN_VALUE(v_cursor, i, v_col_val);
                DBMS_OUTPUT.PUT_LINE('<td>' || v_col_val || '</td>');
            END LOOP;
            DBMS_OUTPUT.PUT_LINE('</tr>');
        END LOOP;

        DBMS_SQL.CLOSE_CURSOR(v_cursor);
        DBMS_OUTPUT.PUT_LINE('</table><br/>');
    END LOOP;
EXCEPTION
    WHEN OTHERS THEN
        IF DBMS_SQL.IS_OPEN(v_cursor) THEN
            DBMS_SQL.CLOSE_CURSOR(v_cursor);
        END IF;
        DBMS_OUTPUT.PUT_LINE('<tr><td colspan="5" style="color:red;">Error: ' || SQLERRM || '</td></tr>');
END;
/
EOF

# HTML Footer
echo "</body></html>" >> $HTML_FILE

# Send Mail
echo "Sending mail to $EMAIL_TO..."
mailx -a "Content-Type: text/html" -s "Sanity Check Report: $FEED_NAME - $TRADE_DATE" "$EMAIL_TO" < $HTML_FILE
